// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: proto/restuarant.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Empty } from "../google/protobuf/empty.js";

export const protobufPackage = "";

export interface CreateMenuRequest {
  name: string;
  price: number;
}

export interface MenuItem {
  id: string;
  name: string;
  price: number;
}

export interface MenuList {
  menu: MenuItem[];
}

export interface MenuId {
  id: string;
}

export const _PACKAGE_NAME = "";

export interface RestaurantServiceClient {
  getAllMenu(request: Empty, metadata?: Metadata): Observable<MenuList>;

  get(request: MenuId, metadata?: Metadata): Observable<MenuItem>;

  insert(request: CreateMenuRequest, metadata?: Metadata): Observable<MenuItem>;

  update(request: MenuItem, metadata?: Metadata): Observable<MenuItem>;

  remove(request: MenuId, metadata?: Metadata): Observable<Empty>;
}

export interface RestaurantServiceController {
  getAllMenu(request: Empty, metadata?: Metadata): Promise<MenuList> | Observable<MenuList> | MenuList;

  get(request: MenuId, metadata?: Metadata): Promise<MenuItem> | Observable<MenuItem> | MenuItem;

  insert(request: CreateMenuRequest, metadata?: Metadata): Promise<MenuItem> | Observable<MenuItem> | MenuItem;

  update(request: MenuItem, metadata?: Metadata): Promise<MenuItem> | Observable<MenuItem> | MenuItem;

  remove(request: MenuId, metadata?: Metadata): void;
}

export function RestaurantServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getAllMenu", "get", "insert", "update", "remove"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("RestaurantService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("RestaurantService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const RESTAURANT_SERVICE_NAME = "RestaurantService";
