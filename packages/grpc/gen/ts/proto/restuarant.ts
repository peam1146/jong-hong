// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: proto/restuarant.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Empty } from "../google/protobuf/empty.js";

export const protobufPackage = "";

export interface CreateMenuRequest {
  name: string;
  price: number;
}

export interface MenuItem {
  id: string;
  name: string;
  price: number;
}

export interface MenuList {
  menu: MenuItem[];
}

export interface MenuId {
  id: string;
}

function createBaseCreateMenuRequest(): CreateMenuRequest {
  return { name: "", price: 0 };
}

export const CreateMenuRequest: MessageFns<CreateMenuRequest> = {
  encode(message: CreateMenuRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.price !== 0) {
      writer.uint32(16).int32(message.price);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateMenuRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateMenuRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.price = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateMenuRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      price: isSet(object.price) ? globalThis.Number(object.price) : 0,
    };
  },

  toJSON(message: CreateMenuRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.price !== 0) {
      obj.price = Math.round(message.price);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateMenuRequest>, I>>(base?: I): CreateMenuRequest {
    return CreateMenuRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateMenuRequest>, I>>(object: I): CreateMenuRequest {
    const message = createBaseCreateMenuRequest();
    message.name = object.name ?? "";
    message.price = object.price ?? 0;
    return message;
  },
};

function createBaseMenuItem(): MenuItem {
  return { id: "", name: "", price: 0 };
}

export const MenuItem: MessageFns<MenuItem> = {
  encode(message: MenuItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.price !== 0) {
      writer.uint32(24).int32(message.price);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MenuItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMenuItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.price = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MenuItem {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      price: isSet(object.price) ? globalThis.Number(object.price) : 0,
    };
  },

  toJSON(message: MenuItem): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.price !== 0) {
      obj.price = Math.round(message.price);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MenuItem>, I>>(base?: I): MenuItem {
    return MenuItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MenuItem>, I>>(object: I): MenuItem {
    const message = createBaseMenuItem();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.price = object.price ?? 0;
    return message;
  },
};

function createBaseMenuList(): MenuList {
  return { menu: [] };
}

export const MenuList: MessageFns<MenuList> = {
  encode(message: MenuList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.menu) {
      MenuItem.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MenuList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMenuList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.menu.push(MenuItem.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MenuList {
    return { menu: globalThis.Array.isArray(object?.menu) ? object.menu.map((e: any) => MenuItem.fromJSON(e)) : [] };
  },

  toJSON(message: MenuList): unknown {
    const obj: any = {};
    if (message.menu?.length) {
      obj.menu = message.menu.map((e) => MenuItem.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MenuList>, I>>(base?: I): MenuList {
    return MenuList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MenuList>, I>>(object: I): MenuList {
    const message = createBaseMenuList();
    message.menu = object.menu?.map((e) => MenuItem.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMenuId(): MenuId {
  return { id: "" };
}

export const MenuId: MessageFns<MenuId> = {
  encode(message: MenuId, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MenuId {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMenuId();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MenuId {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: MenuId): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MenuId>, I>>(base?: I): MenuId {
    return MenuId.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MenuId>, I>>(object: I): MenuId {
    const message = createBaseMenuId();
    message.id = object.id ?? "";
    return message;
  },
};

export interface RestaurantService {
  GetAllMenu(request: Empty): Promise<MenuList>;
  Get(request: MenuId): Promise<MenuItem>;
  Insert(request: CreateMenuRequest): Promise<MenuItem>;
  Update(request: MenuItem): Promise<MenuItem>;
  Remove(request: MenuId): Promise<Empty>;
}

export const RestaurantServiceServiceName = "RestaurantService";
export class RestaurantServiceClientImpl implements RestaurantService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || RestaurantServiceServiceName;
    this.rpc = rpc;
    this.GetAllMenu = this.GetAllMenu.bind(this);
    this.Get = this.Get.bind(this);
    this.Insert = this.Insert.bind(this);
    this.Update = this.Update.bind(this);
    this.Remove = this.Remove.bind(this);
  }
  GetAllMenu(request: Empty): Promise<MenuList> {
    const data = Empty.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetAllMenu", data);
    return promise.then((data) => MenuList.decode(new BinaryReader(data)));
  }

  Get(request: MenuId): Promise<MenuItem> {
    const data = MenuId.encode(request).finish();
    const promise = this.rpc.request(this.service, "Get", data);
    return promise.then((data) => MenuItem.decode(new BinaryReader(data)));
  }

  Insert(request: CreateMenuRequest): Promise<MenuItem> {
    const data = CreateMenuRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Insert", data);
    return promise.then((data) => MenuItem.decode(new BinaryReader(data)));
  }

  Update(request: MenuItem): Promise<MenuItem> {
    const data = MenuItem.encode(request).finish();
    const promise = this.rpc.request(this.service, "Update", data);
    return promise.then((data) => MenuItem.decode(new BinaryReader(data)));
  }

  Remove(request: MenuId): Promise<Empty> {
    const data = MenuId.encode(request).finish();
    const promise = this.rpc.request(this.service, "Remove", data);
    return promise.then((data) => Empty.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
